// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length, mLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0)
        {
            let str = Array.new(maxLength);
        }
        let mLength = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (mLength > 0)
        {
            do str.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < length)
        {
            return str[j];
        }

        do Sys.error(69);
        return 0;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0)
        {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int v, i, d, sign;

        let v = 0;
        let i = 0;

        if (charAt(0) = 45)
        {
            let i = 1;
            let sign = -1;
        }
        else
        {
            let sign = 1;
        }

        while (i < length)
        {
            let d = charAt(i) - 48;
            let v = (v * 10) + d;
            let i = i + 1;
        }

        return sign * v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit, c, absVal, absValDiv10;

        let absVal = Math.abs(val);

        // Hack to prevent overflow in division when dividing by 10.
        let absValDiv10 = (absVal / 2) / 5;

        let lastDigit = absVal - (absValDiv10 * 10);
        let c = lastDigit + 48;

        if (absVal < 10)
        {
            let length = 0;
            if (val < 0)
            {
                do appendChar(45); // minus
            }
        }
        else
        {
            if (val > 0)
            {
                do setInt(absValDiv10);
            }
            else
            {
                do setInt(-absValDiv10);
            }

        }

        do appendChar(c);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
