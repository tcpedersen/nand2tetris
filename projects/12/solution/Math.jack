// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0]       = 1;
        let twoToThe[1]       = 2;
        let twoToThe[2]       = 4;
        let twoToThe[3]       = 8;
        let twoToThe[4]      = 16;
        let twoToThe[5]      = 32;
        let twoToThe[6]      = 64;
        let twoToThe[7]     = 128;
        let twoToThe[8]     = 256;
        let twoToThe[9]     = 512;
        let twoToThe[10]   = 1024;
        let twoToThe[11]   = 2048;
        let twoToThe[12]   = 4096;
        let twoToThe[13]   = 8192;
        let twoToThe[14]  = 16384;
        let twoToThe[15] = -32767 - 1; // Hack for binary value 1000 0000 0000 0000.

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        return Math.sign(x) * x;
    }

    function int twoToThe(int j)
    {
        if (j < 16)
        {
            return twoToThe[j];
        }

        do Sys.error(420);
        return 0;
    }

    // Returns true if the jth bit of the integer x is 1 and false otherwise.
    function boolean bit(int x, int j) {
        return ~((x & twoToThe[j]) = 0);
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, j;

        let sum = 0;
        let shiftedX = x;
        let j = 0;

        while (j < 16)
        {
            if (Math.bit(y, j))
            {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, s, z, w;

        let z = Math.abs(x);
        let w = Math.abs(y);

        if ((w > z) | (w < 0)) { return 0; }

        let q = Math.divide(z, 2 * w);
        let s = Math.sign(x) * Math.sign(y);

        if ((z - (2 * q * w)) < w)
        {
            return s * 2 * q;
        }
        else
        {
            return s * ((2 * q) + 1);
        }
    }

    function int sign(int x)
    {
        if (x < 0)
        {
            return -1;
        }
        else
        {
            return 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j;
        var int y;
        var int yplus, yplus_sq;

        let j = (16 / 2) - 1;
        let y = 0;

        while (~(j < 0))
        {
            let yplus = y + Math.twoToThe(j);
            let yplus_sq = yplus * yplus;

            if ((~(yplus_sq > x)) & (yplus_sq > 0))
            {
                let y = yplus;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b)
        {
            return a;
        } 
        else 
        {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b)
        {
            return b;
        } 
        else 
        {
            return a;
        }
    }
}
